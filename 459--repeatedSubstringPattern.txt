给定一个非空的字符串，判断它是否可以由它的一个子串重复多次构成。给定的字符串只含有小写英文字母，
并且长度不超过10000。

示例 1:

输入: "abab"

输出: True

解释: 可由子字符串 "ab" 重复两次构成。

示例 2:

输入: "aba"

输出: False
示例 3:

输入: "abcabcabcabc"

输出: True

解释: 可由子字符串 "abc" 重复四次构成。
 (或者子字符串 "abcabc" 重复两次构成。)


分析：如果这个字符串满足要求，那么肯定是它的前一半字符串中的子字符串重复构成这个字符串，所以我们只用len/2字
符串来判断即可。我们定义两个StringBuilder s1,s2我们从第一个字符开始，把s的字符一个个放进s1，并且重复s1，
然后判断s2是不是等于s,
class Solution {
    public boolean repeatedSubstringPattern(String s) {
        if(s.length()==0||s==null) return true;
        if(s.length()==1) return false;
        StringBuilder s1=new StringBuilder();
        StringBuilder s2=new StringBuilder();
        for(int i=0;i<=s.length()/2;i++){
            s1.append(s.charAt(i));
            if(s.length()%s1.length()==0){
                while(s2.length()<s.length()){
                    s2.append(s1);
                }
                if(s2.toString().equals(s)&&(s1.length()<s.length())){
                    return true;
                }
                s2.delete(0,s2.length());//当前的s2不满足要求，要清空，然后用来存下一轮的字符串。
            }
        }
        return false;
    }
}
第二种：正则表达式
(\\w+)1个或者多个字母作为一个捕获组，\\1+重复1次以上。
class Solution {
    public boolean repeatedSubstringPattern(String s) {
        return s.matches("(\\w+)\\1+");
    }
}
第三种：
class Solution {
    public boolean repeatedSubstringPattern(String s) {
        if(s==null||s.length()==0) return true;
        if(s.length()==1) return false;
        //只有一个字母重复组成的字符串"aaaaaaa","zzzzzz"
        if(s.split(String.valueOf(s.charAt(0))).length==0) return true;
        //从后往前，找最长的子字符串，分割判断分割后数组长度是否为0
        for(int i=s.length()-1;i>=2;i--){
            if(s.length()%i==0){
                String s1=s.substring(0,i);
                if(s.split(s1).length==0)
                    return true;
            }
        }
        return false;
    }
}