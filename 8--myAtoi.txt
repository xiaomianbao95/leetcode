题目：
实现将字符串转换为整数的Atoi。

函数首先根据需要丢弃尽可能多的空白字符，直到找到第一个非空白字符。
然后，从这个字符开始，取一个可选的初始正负号，后跟尽可能多的数字，并将它们解释为一个数值。

字符
串可以在构成整数的字符之后包含其他字符，这些字符将被忽略，并且不会影响此函数的行为。

如果str中的
第一个非空白字符序列不是有效的整数，或者由于str为空或仅包含空白字符而不存在此类序列，则不执行转
换。

如果无法执行有效的转换，则返回零值。
假设我们处理的环境只能存储32位有符号整数范围内的整数：【231231231-1】。如果数值超出可表示值的范围，
则返回int_max（231?1）或int_min（?231）。
例如：

Input: "42" Output: 42
Input: "   -42" Output: -42
Input: "4193 with words"  Output: 4193
Input: "words and 987"  Output: 0
Input: "-91283472332"   Output: -2147483648
分析：
1.首先字符串可能以若干个空白字符即' ' 开始，我们要找到有效字符才可以开始判断，所以可以用String.trim()
方法去除前后空白格，然后开始判断。
2，如果去除空白格后字符串为null,或者长度为0，直接返回0；
3.如果字符串以“+”“―”开始则要记录下来从他的下一位开始判断
4.考虑溢出问题，如果溢出res在计算机中的表示就会改变，就不能与int的边界值比较，为了能和边界值比较
是否溢出，我们把res定义为long型就可以存储目前的值，然后比较是否超出int范围，再做处理。
5. 定义了一个标记符temp,当违法返回0时，就可以通过查看temp知道是违法返回还是为0返回。

class Solution {
    boolean temp=false;
    public int myAtoi(String str) {
        String str1=str.trim();
        if(str1==null||str1.length()==0){
            temp=true;
            return 0;
        }
            
        int flag=0;
        int flag2=1;
        if(str1.charAt(0)=='+')
            flag=1;
        if(str1.charAt(0)=='-'){
            flag=2;
            flag2=-1;
        }        
        int start=flag>0?1:0;
        int len=str1.length();
        long res=0;
        while(start<len){
            if(str1.charAt(start)<'0'||str1.charAt(start)>'9'){
               break;
            }else{
                res=(res<<1)+(res<<3)+(str1.charAt(start)-'0');
                start++;
                if(res*flag2<Integer.MIN_VALUE){
                   return Integer.MIN_VALUE;
                }else if(res*flag2>Integer.MAX_VALUE){
                          return Integer.MAX_VALUE;
                      }    
                 }
        }
        if(start==0){
            temp=true;
            return 0; 
        }         
         return (int)res*flag2; 
    }
}
第二种溢出处理：这种情况下不用把res定义成long型，
用((sum-(str1.charAt(start)-'0'))/10!=res)||(sum<res)可以判断是否溢出，然后判断左溢出输出最小边界
右溢出输出最大边界。
class Solution {
    boolean temp=false;
    public int myAtoi(String str) {
        String str1=str.trim();
        if(str1==null||str1.length()==0){
            temp=true;
            return 0;
        }
            
        int flag=0;
        int flag2=1;
        if(str1.charAt(0)=='+')
            flag=1;
        if(str1.charAt(0)=='-'){
            flag=2;
            flag2=-1;
        }        
        int start=flag>0?1:0;
        int len=str1.length();
        int res=0;
        while(start<len){
            if(str1.charAt(start)<'0'||str1.charAt(start)>'9'){
               break;
            }else{
                int sum=res*10+(str1.charAt(start)-'0');
	                if(((sum-(str1.charAt(start)-'0'))/10!=res)||(sum<res)) {
	                	if(flag==2)
	                		return Integer.MIN_VALUE;
	                	return Integer.MAX_VALUE;
	                }else {
	                	 res=res*10+(str1.charAt(start)-'0');
	 	                 start++;
	                }
                 }
        }
        if(start==0){
            temp=true;
            return 0; 
        }         
         return res*flag2; 
    }
}