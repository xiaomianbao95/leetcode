给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807
分析：注意给的链表是倒序的，最后输出的连接也是相加数的倒叙链表。
我们就按十进制中的加法满10进1可以，定义一个进位标志位flag=sum/10;
定义一个sum=l1.val+l2.val+flag;这里要注意某一个链表先结束的情况。
还有最后返回的是一个链表，先定一个头结点，最后每个加数以new ListNode(sum)形式，存入链表当前结点之后。
第一种：
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head=new ListNode(-1);
        int flag=0;
        int sum=0;
        ListNode phead=head;
        while(l1!=null&&l2!=null){
            sum=l1.val+l2.val+flag;
            if(sum>9){    
                   flag=sum/10;
                    sum=sum%10;
            }else if(sum<=9){
                flag=0;
            }
            
            phead.next=new ListNode(sum);
            l1=l1.next;
            l2=l2.next; 
            phead=phead.next;
        }
        if(l1==null&&l2!=null){
            while(l2!=null){
                sum=l2.val+flag;
                flag=sum/10;
                phead.next=new ListNode(sum%10);
                l2=l2.next;
                phead=phead.next;
            }       
        }
        if(l2==null&&l1!=null){
            while(l1!=null){
                sum=l1.val+flag;
                flag=sum/10;
                phead.next=new ListNode(sum%10);
                l1=l1.next;
                phead=phead.next;
            }       
        }
        if(l1==null&&l2==null){
            if(flag>0)
                phead.next=new ListNode(flag);
        }
            
        return head.next;     
    }
}
第二种：
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode head=new ListNode(-1);
        ListNode phead=head;
        int flag=0;
        while(l1!=null||l2!=null){
            int x=(l1!=null)?l1.val:0;
            int y=(l2!=null)?l2.val:0;
            int sum=x+y+flag;
            flag=sum/10;
            phead.next=new ListNode(sum%10);
            phead=phead.next;
            if(l1!=null) l1=l1.next;
            if(l2!=null) l2=l2.next;
        }
        if(flag>0)
            phead.next=new ListNode(flag);
        return head.next;     
    }
}
