给定一个可包含重复数字的序列，返回所有不重复的全排列。


示例:

输入: [1,1,2]
输出:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]


分析：和46题不同的是，这个给定数组中可以有重复的数字，如果按46的全排列方法返回的就有重复的，题目要求不能有重复的
所以我们先Arrays排序数组，然后在排列过程中如果有重复的直接略过不交换，就可以去除重复的了。
import java.util.*;
class Solution {
    List<List<Integer>> res=new ArrayList<List<Integer>>();
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        if(nums==null||nums.length==0)
            return res;
        permuteUnique2(nums,0);
        return res;
        
    }
    public void permuteUnique2(int[] nums,int s){
        if(s==nums.length){
           List<Integer> list=new ArrayList<Integer> ();
            for(int num:nums)
                list.add(num);
            res.add(list);
            
        }else{
            for(int i=s;i<nums.length;i++){
               boolean flag=false;
                for(int j=s;j<i;j++){//在s到i重复的元素就不用交换了，所以这些重复的直接跳过
                    if(nums[j]==nums[i])
                        flag=true;
                }
                if(flag) continue;
                int temp1=nums[s];nums[s]=nums[i];nums[i]=temp1;
                permuteUnique2( nums,s+1);
                int temp2=nums[s];nums[s]=nums[i];nums[i]=temp2;
            }
            
          }
       
        
        }
    
    }

