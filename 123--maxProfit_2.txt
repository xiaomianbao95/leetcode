给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。

注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:

输入: [3,3,5,0,0,3,1,4]
输出: 6
解释: 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
示例 2:

输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: [7,6,4,3,1] 
输出: 0 
解释: 在这个情况下, 没有交易完成, 所以最大利润为 0。
动态规划思想
定义一个三维数组：
dp[i][k][0/1]表示第i天交易k次现在是持有股票（0）或者没有持有股票（1）；
状态转移：
第i天交易K次现在没有持有股票,一种情况是前一天本来就没有持有股票，第二种情况是前一天持有股票，第i天把股票出售。
dp[i][k][0]=max(dp[i-1][k][0],dp[i-1][k][1]+prices[i]);
第i天交易K次现在持有股票，一种情况是前一天本来就持有股票，前一天不持有股票，第i天购入股票，交易次数要加1，总收益要减去购入花的钱
dp[i][k][1]=max(dp[i-1][k][1],dp[i-1][k-1][0]-prices[i]);

class Solution {
    public int maxProfit(int[] prices) {
        if(prices==null||prices.length<1)
            return 0;
        int n=prices.length;
        int max_k=2;
        //第一种方法
        //穷举k=2,1的情况
        // dp[i][2][0]=max(dp[i-1][2][0],dp[i-1][2][1]+prices[i]);
        // dp[i][2][1]=max(dp[i-1][2][1],dp[i-1][1][0]-prices[i]);
        // dp[i][1][0]=max(dp[i-1][1][0],dp[i-1][1][1]+prices[i]);
        // dp[i][1][1]=max(dp[i-1][1][1],dp[i-1][0][0]-prices[i])=
        //     max(dp[i-1][1][1],-prices[i])
//         int dp_i10=0,dp_i20=0,dp_i11=Integer.MIN_VALUE,dp_i21=Integer.MIN_VALUE;
        
//         for(int i=0;i<n;i++){
//             dp_i20=Math.max(dp_i20,dp_i21+prices[i]);
//             dp_i21=Math.max(dp_i21,dp_i10-prices[i]);
//             dp_i10=Math.max(dp_i10,dp_i11+prices[i]);
//             dp_i11=Math.max(dp_i11,-prices[i]);
                
//         }
//         return dp_i20;
        
//     }
// }
        //第二种方法
         int [][][] dp=new int[n][max_k+1][2];
        for(int i=0;i<n;i++){
            for(int k=max_k;k>=1;k--){
                if(i-1==-1){
                      dp[i][k][0]=0;//i-1=-1时还没有开始收益为0
                      dp[i][k][1]=-prices[i];//i-1=-1时，第0天开始//购入收益为-prices[0];
                }else{
                   dp[i][k][0]=Math.max(dp[i-1][k][0],dp[i-1][k][1]+prices[i]);
                   dp[i][k][1]=Math.max(dp[i-1][k][1],dp[i-1][k-1][0]-prices[i]);
                     }    
               }        
       }
        return dp[n-1][2][0];  
    }
}
