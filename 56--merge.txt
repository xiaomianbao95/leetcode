给出一个区间的集合，请合并所有重叠的区间。

示例 1:

输入: [[1,3],[2,6],[8,10],[15,18]]

输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].

示例?2:

输入: [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。

分析:这个题目其实就是有交集的区间去掉交集合并为一个，我们比较两个区间的关系时，就是用第一个区间下界
和第二个区间下界比较，还有第一个区间上界和第二个区间上下界比较就可以知道两个区间有没有交集能不能合并为一个区间

又要考虑两个区间下界大小，还要考虑两个区间上界大小，分析情况太小太麻烦，我们可以先按区间下界大小，把区间排个序，
按递增顺序排，可以用Arrys中的sort()方法，自己重新比较方法。注意这种方法的写法！！！！
排完序后，我们只要比较第一个区间上界和第二个区间下界，再和上界比较，注意这里一个问题，可能第一个区间和后面区间也
可以合并，所以这一轮比较一直到所有区间为止，每一次比较结果要用一个区间存下来，我们定一个长度只有2的int数组temp
temp[1],永远存的是较大的上界，一直用它和后面的区间上下界比较；一轮比较完，把temp存入list,最终返回的是int[][]
所以要用ArrayList中的toArray()把list以int数组形式返回。
import java.util.*;
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals==null||intervals.length<2)
            return intervals;
        Arrays.sort(intervals,new Comparator<int[]>(){
            public int compare(int[] o1,int[] o2){
                return o1[0]-o2[0];
            }
        });
        
        ArrayList<int[]> list=new ArrayList<>();
        int len=intervals.length;
        for(int i=0;i<len;i++){
            int[] temp=new int[2];
            temp[0]=intervals[i][0];
            temp[1]=intervals[i][1];
            while(i<(len-1)&&temp[1]>=intervals[i+1][0]){
                temp[1]=Math.max(temp[1],intervals[i+1][1]); 
                i++;
            }
             list.add(temp);
        }
        int[][] arr=new int[list.size()][2];
        list.toArray(arr);
        return arr;       
    }
}
第二种也是先排序，思路基本一样

import java.util.*;
class Solution {
    public int[][] merge(int[][] intervals) {
        if(intervals==null||intervals.length<2)
            return intervals;
        Arrays.sort(intervals,new Comparator<int[]>(){
             public int compare(int[] o1,int[] o2){
                  return o1[0]-o2[0];
             }
        });
        int len=intervals.length;
        int count=0;
        for(int i=0;i<len-1;i++){
           if(intervals[i][0]<=intervals[i+1][0]&&intervals[i][1]>=intervals[i+1][0]){
               count++;
               intervals[i+1][0]=Math.min(intervals[i][0],intervals[i+1][0]);
               intervals[i+1][1]=Math.max(intervals[i][1],intervals[i+1][1]);
               intervals[i][0]=-1;
               intervals[i][1]=-1;
           }
        }
        int j=0;
        int[][] res=new int[len-count][2];
        for(int i=0;i<len;i++){
            if(intervals[i][0]!=-1){
               res[j][0]=intervals[i][0];
               res[j][1]=intervals[i][1];
                j++;
            }
        }
        return res;
        
    }
}