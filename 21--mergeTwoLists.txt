将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。
?

示例：

输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4


递归：
注意递归每次新建一个变量head.存当前较小的数，它的下一个再调用递归，最后一层层返回的head，就可以接在之前的head.next
后面，最终返回成一条链表
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1==null)
            return l2;
        if(l2==null)
            return l1;
        ListNode head=null;
        if(l1.val<=l2.val){
            head=l1;
            head.next=mergeTwoLists(l1.next,l2);
        }else{
            head=l2;
            head.next=mergeTwoLists(l1,l2.next);
        }
        return head;    
    }
}
非递归：
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode temp=new ListNode(-1);
        ListNode root=temp;
        while(l1!=null&&l2!=null){
            if(l1.val<=l2.val){
                temp.next=l1;
                temp=l1;
                l1=l1.next;
            }else{
                temp.next=l2;
                temp=l2;
                l2=l2.next;
            }
        }
        if(l2==null)
            temp.next=l1;
        if(l1==null)
            temp.next=l2;
        return root.next;
    }
}