给定一个数组，它的第?i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票），
设计一个算法来计算你所能获取的最大利润。

注意你不能在买入股票前卖出股票。

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 
在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
    
 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 
没有交易完成, 所以最大利润为 0。


解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

第一种:累积相邻两个数之和，如果大于之前的累积和就更新最大值，如果累积和为负数，说明该点不是合适的买入点，累积和清零，从后面再开始找累积和最大的，就是最大收益。
class Solution {
    public int maxProfit(int[] prices) {
        if(prices==null||prices.length==0)
            return 0;
        int max=0;int temp=0;
        for(int i=1;i<prices.length;i++){
            temp+=prices[i]-prices[i-1];
            if(temp>max){
                max=temp;
            }else if(temp<=0){
                temp=0;
            }
        }
        return max;
        
    }
}
第二种：暴力法，求出所有两个的差值，找出最大的就是最大收益
class Solution {
    public int maxProfit(int[] prices) {
        if(prices==null||prices.length==0)
            return 0;
        int max=0;
        for(int i=0;i<prices.length;i++){
           for(int j=i+1;j<prices.length;j++){
               int temp=prices[j]-prices[i];
               if(temp>max)
                   max=temp;
           }
        }
        return max;
        
    }
}

