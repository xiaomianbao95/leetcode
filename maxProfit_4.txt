给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。
你最多可以完成 k 笔交易。

注意:?你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。


示例?1:

输入: [2,4,1], k = 2
输出: 2
解释: 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4)
 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。

示例 2:

输入: [3,2,6,5,0,3], k = 2
输出: 7
解释: 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 
的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
?    随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 
(股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。



class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices==null||prices.length<1||k==0)
            return 0;
        int n=prices.length;
        //正常情况下，一天购入，一天出售，需要两天，那么k最大等于n/2，那么有效的k限制作用是k<=n/2,如果超过了就没有约束作用了，相当于k可以无穷次。
        if(k>n/2)
            return maxProfit_inf(prices);
        int[][][] dp=new int[n][k+1][2];
        for(int i=0;i<n;i++){
            for(int j=k;j>=1;j--){
                if(i-1==-1){
                    dp[i][j][0]=0;
                    dp[i][j][1]=-prices[i];     
                }else{
                    dp[i][j][0]=Math.max(dp[i-1][j][0],dp[i-1][j][1]+prices[i]);
                    dp[i][j][1]=Math.max(dp[i-1][j][1],dp[i-1][j-1][0]-prices[i]);
                }
                
            }
        }
        return dp[n-1][k][0];      
    }
    //当k>n/2，那么k次数就相当于不限制了，所以我们就不用记录k的次数了
    public int maxProfit_inf(int[] prices){
        int n=prices.length;
        int[][] dp=new int[n][2];
        for(int i=0;i<n;i++){
            if(i-1==-1){
                dp[i][0]=0;//刚开始第一天没有持有股票收益为0
                dp[i][1]=-prices[i];//刚开始第一天购入股票收益为-prices[0]
                
            }else{
                dp[i][0]=Math.max(dp[i-1][0],dp[i-1][1]+prices[i]);
                dp[i][1]=Math.max(dp[i-1][1],dp[i-1][0]-prices[i]);
            }
            
        }
        return dp[n-1][0];
        
    }
}

