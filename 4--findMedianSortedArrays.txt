给定两个大小为 m 和 n 的有序数组?nums1 和?nums2。

请你找出这两个有序数组的中位数，
并且要求算法的时间复杂度为?O(log(m + n))。

你可以假设?nums1?和?nums2?不会同时为空。


示例 1:

nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0
示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5


给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。

请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

你可以假设 nums1 和 nums2 不会同时为空。

示例 1:

nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0
示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5
第一种方法：
分析：如果直接用归并然后取中位数，这样复杂度为O((M+N)log(M+N)),这样不满足题目要求，我们可以根据两个数组的总长度确定出中位数的位置（m+n-1）/2或者（m+n）/2，我们直接归并到（m+n）/2的位置就可以确定出中位数了，这里我们维护一个长度为2的数组res用来存放归并的数，因为最后最多长度为偶数时，只用中位的两个位置数，奇数时只用一个所以维护长度为2就可以，用一个变量count记录位置，count&1就可以算出存入res的索引，用逻辑&比直接%2效率高，最后count的位置上正好是最边界位置。
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m=nums1.length;
        int n=nums2.length;
        
        int midindex=(m+n)>>1;
        int count=-1;
        int i=0;int j=0;
        //定义一个长度为2的数组用来存放长度为奇数或者偶数时，要存放的数
        int res[]=new int[2];
        while(count<midindex){
            count++;
            //先考虑两个数组边界问题，以防出现越界情况
            if(i==m){
                res[count&1]=nums2[j];
                j++;
            }else if(j==n){
                res[count&1]=nums1[i];
                i++;
            }else if(nums1[i]<=nums2[j]){
                res[count&1]=nums1[i];
                i++;
            }else if(nums1[i]>nums2[j]){
                res[count&1]=nums2[j];
                j++;
            }
        }
        //如果长度为奇数，最后count&1的位置就是中位数，如果长度为偶数，最后count正好走到中位数的第二个，所以(res[0]+res[1])/2.0
        if(((m+n)&1)==1){
            return (double)res[count&1];
        }else{
            return (res[0]+res[1])/2.0;
        }
        
    }
}

第二种方法：
第一种方法每次一个个排除不满足要求的，我们可以以一半一半地排除不满足要求的

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n=nums1.length;
        int m=nums2.length;
        
        int one=(n+m+1)>>1;//one two是为了求中位的数，奇数时，one=two,
        int two=(n+m+2)>>1;
        //奇数情况和偶数情况合并，奇数时求了两次中位数
        return (getKth(nums1,0,n-1,nums2,0,m-1,one)+getKth(nums1,0,n-1,nums2,0,m-1,two))/2.0;
    }
   private int getKth(int[] nums1,int start1,int end1,int[] nums2,int start2,int end2,int k){ 
        int len1=end1-start1+1;
        int len2=end2-start2+1;
        //让len1一直保持是最短的，这样len1==0了就可以返回len2中第k小的数了
        if(len1>len2) return getKth(nums2,start2,end2,nums1,start1,end1,k);
        
        if(len1==0) return nums2[start2+k-1];
        
        if(k==1) return Math.min(nums1[start1],nums2[start2]);
        //算两个数组中第k/2小的数的位置
        int i=start1+Math.min(k/2,len1)-1;
        int j=start2+Math.min(k/2,len2)-1;
        
        if(nums1[i]<nums2[j]){
            //nums1[i]<nums2[j]时，舍弃nums1中前i个数
            return getKth(nums1,i+1,end1,nums2,start2,end2,k-(i-start1+1));
        }else{
            //nums1[i]>=nums2[j]时，舍弃nums2中前j个数
            return getKth(nums1,start1,end1,nums2,j+1,end2,k-(j-start2+1));
        }
    }
}

第三种方法：把两个数组分别划分成两部分，i,j位置划分，然后把i前半部分和j前半部分看成一部分m，
再把i后半部分和j后半部分看成一部分n，选出m中最大的和n中最小的，如果是总长度为偶数，就是这两个相加除2.0
如果是奇数就返回m中最大的。特别的要考虑边界情况。
class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m=nums1.length;
        int n=nums2.length;
         if(m>n) return findMedianSortedArrays(nums2,nums1);
        int imin=0,imax=m;
        while(imin<=imax){
            int i=(imin+imax)/2;
            int j=(m+n+1)/2-i;
            if(j!=0&&i!=m&&nums2[j-1]>nums1[i]){
                imin=i+1;//i要增大
            }else if(i!=0&&j!=n&&nums1[i-1]>nums2[j]){
                imax=i-1;//i要减小
            }else{
                int maxleft=0;
                if(i==0){
                    maxleft=nums2[j-1];
                }else if(j==0){
                    maxleft=nums1[i-1];
                }else{
                    maxleft=Math.max(nums1[i-1],nums2[j-1]);
                }
                if((m+n)%2==1) return maxleft;
                
                int minright=0;
                if(i==m){
                    minright=nums2[j];
                }else if(j==n){
                    minright=nums1[i];
                }else{
                    minright=Math.min(nums1[i],nums2[j]);
                }
                
                return (maxleft+minright)/2.0;
            }
        }
        return 0.0;
    }
}