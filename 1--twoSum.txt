给定一个整数数组 nums?和一个目标值 target，请你在该数组中找出和为目标值的那?两个?整数，
并返回他们的数组下标。

你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样
的元素。

示例:

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9
所以返回 
[0, 1]



第一种方法暴力法：
两轮循环：
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] temp=new int[2];
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if((nums[i]+nums[j])==target){
                temp[0]=i;
                temp[1]=j;
                return temp;
                }
            }
            
        }
        return temp;
        
    }
}




第二种空间换时间，用HashMap存数，因为我们知道，在哈希表中取一个数的时间复杂度是O(1)所以，这样
时间复杂度低一点，我们先把nums中存的数和对应下标存进HashMap，key存nums中数，value存下标，然后
target-nums[i]在map中找目标，但是这样有一个问题如果是两个数相等，那么我们最后返回的是同一位置
同一个数，所以再map中查找时，我们限定找到的value不能等于当前的i,这样就避免了重复。
import java.util.*;
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] temp=new int[2];
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            map.put(nums[i],i);
        }
        for(int i=0;i<nums.length;i++){
            int a=target-nums[i];
            if(map.containsKey(a)&&map.get(a)!=i){
                temp[0]=i;
                temp[1]=map.get(a);
                return temp;
            }
        }
        return temp;
        
    }
}
另一种hashmap是边走边查找满足要求得也可以避免重复。
import java.util.*;
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int [] temp=new int[2];
        HashMap<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            int a=target-nums[i];
            if(map.containsKey(a)){
                temp[0]=map.get(a);
                temp[1]=i;
                return temp;
            }else{
                map.put(nums[i],i);
            }
        }
        return temp;
    }
}